Big(O) thinking pattern:
[ ]. taking worst case and better cased intn consideration when facing quzzle.
[ ]. the time and space of O(n) depends on the most increased n
[ ]. constant could be removed in front of the most increased n
[ ]. nested inputs represent O(n * n), hence, two inputs of one body with two functions parallelly show O(n + n)  

Whiteboard Coding Interviews: 6 Steps to Solve Any Problem
1. Repeat: make sure you do understand the problem.
2. Example: get insights by doing examples 
3. Approach: come up with your approach(es) to the problem (brute force first)
4. Code: write the code for your chosen approach
5. Testing: pass the testcases
6. Optimize: optimize the complexities (time and space) of your algorithm

Two Loop instance:
bubbleSort（依次遍历出最大至最小值） - insertionSort（每个值都与unsorted list比较大小，直到达到升序排列） - selection sort（找出最小的值往前移动）

MULTIBLE Functions instance:
quickSort（根据pviot用分割函数分成两个比他大小的部分，大小部分再分割函数，每部分再对值和交换 - mergeSort(divider and conquer，把数分出两部分排序，两部分再分成为两个部分，
合计四个部分再分成为八个部分排序)


String {substring}
- [ ] Panlidrome(two pointer, reverse)
- [ ] Anagram(sorting, frequency of counting, counting the character)
（1）越难的题目需要combined with hash table,two pointer,计算长短，三者并驾齐驱（2）三者也是动态关系，指针运动长度时，用max计算长短
（2）substring was addressed by one attempt for employing acsending order that are used for giving the index of each strings,which represents the width
    of slide window will be depended on the distance of right pointer. and hash table could map shortest values/strings to check out original string. 
    {anagram}
 (3) hash table could map shortest values/strings to check out each original string while counting hash table at length, after meeting a string, the
 length will minus. when hash table is equal to 0 or decrease one object, the counter will increment at the same time the width of slide window moved
 by the right pointer will look forward 


Searching:
binary searching(left,mid,right是基础,左右部分搜索也可以)

Two Pointer:
前后交接移动，从外向里移动，从里向外看移动，slide window移动方式(左边等右边满足条件移动), 
for instance: 2sum(两数之和等于target), 3sum(2+1等于2指针) Largest Rectangle in Histogram (calculating length and width flexibly) this solution includes dynamic slide window and two pointers techniques.
Trapping rainwater()

Hash table:
map.set(n,map.get(n)+1 || 1); if(!map[n]) map[n] =1 else map[n]++;

Linked list(singled list)
A.Tow pointers { the former one is faster kth nodes than the latter one( two benefits:1.it could check whether one circle link is true, 2. the former one 
is twice speed as much as the latter one, the slow one will reach the middle of list while the former is at the end of links), another instance:two pointer
could be used to seting two lines in one heap(example: remove kth node from the end of node)}.
B. deploying a new linked list to add old nodes in order to accomplish a aim
C. Combining two lists - attach the head of the second list to the tail of the first list
D. insertion,deletion,reverse linked list, swap two nodes' values

Tree 
- [ ]Binary tree 
A.Traversing by level (bread-first search)
B.Using recursion （deep-first search)
-  inorder { left-root-right }
-  preorder { root-left-right }
-  postorder { left-right-root }

Breadth First Traversal: 1 2 3 4 5 or 1 2 3 5 4 or 1 3 2 4 5 or 1 3 2 5 4 

Depth First Traversals: :
      Preorder Traversal : 1 2 4 5 3 
      Inorder Traversal  : 4 2 5 1 3 
      Postorder Traversal : 4 5 2 3 1

for intsance: Level Order Binary Tree Traversal; Iterative Preorder Traversal;Iterative Postorder Traversal(with 2 stacks)

- [ ]Binary search tree
left is always less than node, and right is always greater than node.

Graph
- [ ] Bread-first search（起点找branch，层层点点过，存入values，放seen true，点的edge一一查，不在就queue）
- [ ] Deep-first search（起点往内走到底，过一道是一道，values,graph,node,seen驷马并驾，存入values，放seen true，node边走边查edge，不在seen就递归）

Interval（ from most interval question, array has been sorted in ascending order or descending order，so it will cut down one factor being considered)
A. Soring the array of intervals by its starting point
B. Merge interval ( [min(a[0], b[0]), max(a[1], b[1])])
C. check if over-lapping interval (return a[0] < b[1] and b[0] < a[1])

Topologic sort( only fits into dircted acyclic graph )
keeping track of one node pointing to another node, and form several indegrees including which nodes has been pointed and another node points to who,then,
producing one relavence( node who points to other nodes : node being pointed ), only one node who havenot been pointed is a starting point and starts
literating all nodes. Once the number node being pointed from starting point is equal to zero and will be next starting point.
for example: Course schedule

Dijkstra algorithm(Finding the shortest node)
0 --(4)--> 1 --(1)--> 3 --(4)--> 5
0 --(2)--> 2 --(6)--> 3 
          --(7)--> 4 --(6)--> 5
the value of all nodes are pre-set to infinite before 0 node goes.
0 as a starting node goes node by node picking the shortest node we have been travesed. Once 0 node goes 2 node as shortest distance, 2 node goes to find
the shortest node via comparing with 3 node or 4 node. The value of 3 node, 4 node are updated while 2 node will be closed. The traversal move to 1 node
that goes 3 node that goes 5 node, at the same time, the value from 3 node and 5 node are updated to be minimum number. the final result come out.

Bell-ford algorithm(also finding the shortest node of graph and take full use of memorization)
this one think about graph that could be made up of several nodes with a few cycles, literating the amount of nodes-1 time will be accpetable.As every 
array preset value of nodes to be infinite and the value between nodes may have positive or negative number, in case every increment with one node pointing to 
another node will be prone to be greater number, literating n-1 times could avoid that.
when using it, should keep in mind that negative cycle doesnot fit into this algorithm. 
for example : Internet delay time


Internet delay time
const t = [[1, 4, 2], [1, 2, 9], [4, 2, -4], [2, 5, -3], [4, 5, 6],[3, 2, 3], [5, 3, 7], [3, 1, 5]]
var networkDelayTime = function(times, N, k) {
  const distances = new Array(N).fill(Infinity);
  
  distances[k - 1] = 0;
  for(let i = 0; i < N - 1; i++) {
    let count = 0;
    for(let j = 0; j < times.length; j++) {
      const source = times[j][0];
      const target = times[j][1];
      const weight = times[j][2];
      
      if(distances[source - 1] + weight < distances[target - 1]) {
        distances[target - 1] = distances[source - 1] + weight;
        count++;
      }
    }
    if(count === 0) break;
  }
  
  const ans = Math.max(...distances);
  return ans === Infinity ? -1 : ans;
};
networkDelayTime(t, 5, 1)；

Course schedule
const p = [[1, 0], [2, 1], [2, 5], [0, 3], [4, 3], [3, 5], [4, 5]]

const canFinish = function(n, prerequisites) {
  const inDegree = new Array(n).fill(0);
  
  for(let i = 0; i < prerequisites.length; i++) {
    inDegree[prerequisites[i][0]]++;
  }
  
  const stack = [];
  
  for(let i = 0; i < inDegree.length; i++) {
    if(inDegree[i] === 0) {
      stack.push(i);
    }
  }
  
  let count = 0;
  
  while(stack.length) {
    const current = stack.pop();
    count++;
    
    for(let i = 0; i < prerequisites.length; i++) {
      const pair = prerequisites[i];
      if(pair[1] === current) {
        inDegree[pair[0]]--;
        if(inDegree[pair[0]] === 0) {
          stack.push(pair[0]);
        }
      }
    }
  }
  
  return count === n;
};
canFinish(6, p)


Level Order Binary Tree Traversal
var levelOrder = function(root) {
    let q = [root], ans = []
    while (q[0]) {
        let qlen = q.length, row = []
        for (let i = 0; i < qlen; i++) {
            let curr = q.shift()
            row.push(curr.val)
            if (curr.left) q.push(curr.left)
            if (curr.right) q.push(curr.right)
        }
        ans.push(row)            
    }
    return ans
};



Iterative Preorder Traversal
function iterativePreorder(node)
{
	if (node == null)
	{
		return;
	}
	var nodeStack = [];
	nodeStack.push(root);

	while (nodeStack.length > 0)
	{
		
		
		var mynode = nodeStack[nodeStack.length - 1];
		document.write(mynode.data + " ");
		nodeStack.pop();
		
		if (mynode.right != null)
		{
			nodeStack.push(mynode.right);
		}
		if (mynode.left != null)
		{
			nodeStack.push(mynode.left);
		}
	}
}


Iterative Postorder Traversal(with 2 stacks)
function postOrderIterative(root) {
        var s1 = [];
        var s2 = [];
 
        if (root == null) return;
        
        s1.push(root)；
 
        while (s1.length > 0) {
          var temp = s1.pop();
          s2.push(temp);
 
          if (temp.left != null) s1.push(temp.left);
          if (temp.right != null) s1.push(temp.right);
        }

        while (s2.length > 0) {
          var temp = s2.pop();
          document.write(temp.data + " ");
        }
 }

Binary First traveral
const rightSideViewBFS = function(root) {  
  if(!root) return [];
  const result = [];
  let queue = [root];
    
  while(queue.length) {
    let length = queue.length, count = 0, currentNode;

    while(count < length) {
      currentNode = queue.shift();
      
      if(currentNode.left) {
        queue.push(currentNode.left);
      }
      
      if(currentNode.right) {
        queue.push(currentNode.right);
      }
      
      count++;
    }

    result.push(currentNode.value)
  }

  return result;
};



Detected Cycle
var hasCycle = function(head) {
    if(!head) {
        return false;
    }
    let hare = head;
    let tortoise = head;
    while(hare) {
        if(!hare.next) {
            return false;
        } else {
            hare = hare.next.next;
            tortoise = tortoise.next;
        }
        if(tortoise == hare) {
            return true;
        }
    }
    return false;
};

Deploying two pointer in one heap: remove kth node from the end of list
var removeNthFromEnd = function(head, n) {
 let fast = head, slow = head
    for (let i = 0; i < n; i++) fast = fast.next
    if (!fast) return head.next
    while (fast.next) fast = fast.next, slow = slow.next
    slow.next = slow.next.next
    return head
}

TwoSum:
var twoSum = function(nums, target) {
      const map = {};
  for (let i = 0; i < nums.length; i++) {
    const another = target - nums[i];

    if (another in map) {
      return [map[another], i];
    }

    map[nums[i]] = i;
  }

  return null;
};

ThreeSum:
var threeSum = function(nums) {
    nums.sort((a, b) => a - b);
    const result = [];
    
    for(let i = 0; i < nums.length; i++) {
        let low = i+1, high = nums.length-1, sum = 0;
        
        while(low < high) {
            sum = nums[i] + nums[low] + nums[high];
            
            if(sum === 0) {
                result.push([nums[i], nums[low], nums[high]]);
                while(nums[low+1] === nums[low]) low++;
                while(nums[high-1] === nums[high]) high--;
                low++;
                high--;
            } else if(sum < 0) low++;
            else high--;
        }
        while(nums[i+1] === nums[i]) i++;
    }
    return result;    
};

//trapping rainywater
const elevationArray = [0, 1, 0, 2, 1, 0, 3, 1, 0, 1, 2]

const getTrappedRainwater = function(heights) {

  let left = 0, right = heights.length - 1, totalWater = 0, maxLeft = 0, maxRight = 0;
  
  while(left < right) {
    if(heights[left] <= heights[right]) {
      if(heights[left] >= maxLeft) { 
        maxLeft = heights[left]
      } else { 
        totalWater += maxLeft - heights[left];
      }
      left++;
    } else {
      if(heights[right] >= maxRight) {
          maxRight = heights[right];
      } else {
          totalWater += maxRight - heights[right];
      }
        
      right--;
    }
  }

  return totalWater;
}


console.log(getTrappedRainwater(elevationArray));

Largest Rectangle in Histogram:
var largestRectangleArea = function(heights) {
   let maxArea = 0;
    let currArea = 0;
    
    for (let i = 0; i < heights.length; i++) {
        let l = i-1;                          
        let r = i+1;
    
        let currHeight = heights[i];
      
        if (heights[r] === currHeight) continue;
        
        currArea = currHeight;
           
        while (l >= 0 && heights[l] >= currHeight) {
            currArea += currHeight;
            l--;
        }
        
        while (r < heights.length && heights[r] >= currHeight) {
            currArea += currHeight;
            r++;
        }
        
        maxArea = Math.max(currArea, maxArea);
        currArea = 0;
    }
    return maxArea;
};


Binary tree searching:
var search = function(nums, target) {
    if (nums.length === 0) return -1; 

  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = left + Math.floor((right - left) / 2);

    if (nums[mid] === target) return mid;

    // left sorted
    if (nums[left] <= nums[mid]) {
      
      // check if is in the left sorted part
      if (nums[left] <= target && target < nums[mid]) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
   
    // right sorted
    } else {
      // check if is in the right sorted part
      if (nums[mid] < target && target <= nums[right]) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
  }
  return -1;
};

Quick Sort:
quickSort(array,leftIndex,rightIndex){
  var pviot;
  if(array.length>1){
      pviot = partition(array,leftIndex,rightIndex);
  }
  if(leftIndex < pviot-1){
       quickSort(array,leftIndex,pviot-1);
  }
  if(rightIndex > pviot){
       quickSort(array,pviot,rightIndex);
  }
}

function partition(array,left,right){
    var pviot = array[Math.floor(left+right)/2];
    
    while(left < right){

     while(array[left]< pviot){
       left++;
     }
    
     while(array[right]>pviot){
       right--;
     }
     
     // swap. values
     if(left<=right){
       let current = array[left];
       array[left] = array[right];
       array[right] = current;
       left++;
       right--;
     }
    
   }
   return left;
}

mergeSort:
function mergeSort(array){

    if(array.length<1) return;
    
    var midpoint = Math.floor(array.length/2);
    var leftarray = array.slice(left,midpoint-1);
    var rightarray = array.slice(midpoint,right);
    
    mergeSort(leftarray);
    mergeSort(rightarray);
    
    merge(array,left);
    
    return array;
}

function merge(leftarray,rightarray,array){
    var index = 0;
    while(leftarray&&rightarray){
      if(leftarray <= rightarray){
        array[index++] = leftarray.unshift();    
      }
      if(leftarray >= rightarray){
         array[index++] = rightarray.unshift();
      }
    }
    
    while(leftarray){
      array[index++] = leftarray.unshift();
    }
    while(rightarray){
      array[index++] = rightarray.unshift();
    }
}

insertion sort

insetionSort(array){
        for(let i=1；i<array.length; i++){
        let current = array[i];
        for(let j=i; j>0 && current < array[j-1]; j--){
             array[j] = array[j-1];
          }
          array[j]=current;
        }
    return array
}

bubbleSort   // 
function bubbleSort(array) {
  var isSorted = false;
  
  while (!isSorted) {
    isSorted = true;

    for (var index = 1; index < array.length; index++) {
 
      if (array[index - 1] > array[index]) {
        isSorted = false;

        var temporaryReference = array[index - 1];
        array[index - 1] = array[index];
        array[index] = temporaryReference;
      }
    }
  }
  return array;
}


selection sort //
function selectionSort(numbers) {
  var length = numbers.length;
  
    for(var index = 0; index < length; index++) {
    
    var smallestNumIndex = index;
 
    for(var nextNumIndex = index + 1; nextNumIndex < length; nextNumIndex++) {
      if(numbers[nextNumIndex] < numbers[smallestNumIndex]) {
        smallestNumIndex = nextNumIndex;
      } 
    }

    if(smallestNumIndex != index) {
      var currentNumber = numbers[index];
      numbers[index] = numbers[smallestNumIndex];
      numbers[smallestNumIndex] = currentNumber;
    }
  }
  return numbers;
}
