从输入URL到到页面展示(页面导航)
渲染进程-------------------------------------------------------------------提---交---文---档---->>>>>>>---页面解析和子资源加载
                                                                             ｜(与网络进程建立数据通道)｜          ｜
浏览器进程--输入url--解析请求-DNS查询解析-开始导航(响应头数据和信息)---(重定向)---准备渲染进程---->>----确认文档提交-->>--页面加载完成
                              ｜          ｜                                  ｜
网路进程------------------------------发起URL请求--(重定向)--读取响应头-----返回解析完响应数据-->>--响应体数据解析---
                              ｜
                           查询过程之一
浏览器缓存机制：-----------------
请求-有缓存?-->有>-是否过期->是>-是否缓存标识-->无>--协商缓存判断Elag-->有>--向服务器请求if-none-match--------服务器返回200或304--------->--------304-->>---
       ｜             ｜                              ｜                                                 |^                  ｜                |
       ｜             no                              ->无>-判断Lastmodfied-->yes>--判断向服务器请求if-modified-since           200        服务器返304读本地缓存
       无             ｜                                             |无                                                        ｜                |
       ｜        直接读取缓存内容		                    服务器请求------------------->>>>------------------------请求响应/缓存协商--->---返请求资源
        ----------------------------------------------------------------------------------------------------------------------------------------^^


 
浏览器页面加载流水线：
加载主页面 --阻止-- 构建dom（响应html数据） --阻止--  执行javascript(v8事件循环)---继续构建dom---构建cssom（css解析）---构建布局树---渲染---分层--分快--合成----------
｜       HTMLparser解析|    |(预解析）                  ｜(响应javascript数据）                ｜(响应javascript数据）                ｜                     |
网络资源请求 ------------    ----开始请求javascript文件----                                    ｜                                  帧（显示屏计算）          |
                           -----开始请求css文件-----------------------------------------------                                                         跨域
			                                                                                                                              ｜
			                                                                                                                              |
 浏览器安全：-----------同页面跳转不同浏览器引发同源(域名,端口,协议)问题,为了满足安全性和便利性,引入第三方资源和跨资源共享,跨文档消息机制,但从中引发浏览器安全问题------------|

    -- XSS(跨站脚本攻击)--html或dom中注入恶意脚本传入服务器然后从页面执行中重要数据被传入恶意服务器。
               ｜
               ｜1）服务器对输入脚本过滤或转码，2)csp内容安全策略限制第三方域提交下载资源文件，内联脚本不执行并上报xss攻击情况3)对cookie设置httpOnly属性
    -- CSRF(跨站点伪请求)  由于服务器请求不严谨的漏洞和cookie用户状态泄漏
    、         ｜
	       ｜1)cookie中samesite,2)验证服务器请求,在http中加上referer和origin,3)crsf token	  

浏览器页面循环系统：
消息队列输入或输出任务按照先进先出顺序给事件循环主线程中执行，i/o进程不仅接受网络进程和浏览器上任务而且将每项交互事件给消息队列
为了解决执行任务实时性和效率性，算入微任务，其在主函数结束之后，宏任务(用户交互,页面渲染,IO输入,JavaScript脚本事件,网络请求读写事件)未结束前异步执行的函数
async function foo() { 
console.log('foo')  // 5.创建一个Promise返回给主协程 
}
async function bar() {    
console.log('bar start') // 3.将控制权交给协程,输出bar start, 
await foo()    // 4.碰到await,执行foo,输出foo
console.log('bar end') //8.当前task结束之前检查微任务队列，执行第一个微任务，将控制器交给协程输出bar end
}
console.log('script start') // 1.首先在主协程中初始化异步函数foo和bar，碰到console.log打印script start；
setTimeout(function () {  // 2. 解析到setTimeout，初始化一个Timer，创建一个新延迟执行task在queue中
console.log('setTimeout')}, 0) //10.当前任务执行完毕进入下一个任务，输出setTimeout
bar();  //3.执行bar函数
new Promise(function (resolve) {  // 6.将返回的promise添加到微任务队列，向下执行 new Promise，输出 promise executor
console.log('promise executor')    
resolve(); 
}).then(function () {  
console.log('promise then'). //9. 执行第二个微任务 输出 promise then
})
console.log('script end') //7.输出script end


浏览器中HTTP
http1出现应对万维网产生的数据苛刻要求日益增长,支撑多种数据类型，数据文件大小，数据编码形式，语言版本来应对多样化网络需求，在这基础上,引出数据压缩,服务器处理状态码,cache缓存处理,
用户数量（称为用户代理）
｜
HTTP1.1:持久tcp连接,一域名有六个tcp连接,域名分片机制,队头阻塞,虚拟机支持为解决不同主机ip的host字段,数据分割多个小数据包,动态内容；
依然存在问题是：底宽利用率低,因为tcp慢启动,多个tcp连接会竞争固定带宽，队头阻塞；
｜
HTTP2为解决这个问题提出了多路复用：一个域名对应一个持久tcp连接和消除队头阻塞。实现原理，将post带有的请求头行体进入二进制分帧层，被其带上id编号帧传入服务器，然后整体处理再返回到
二进制分帧层，被根据id回应原请求。另外也增加了请求优先级,头部压缩,服务器推送（直接拿html后，等于拿到html附带css和js文件一起被解析）
｜
TCP的队头堵塞，网络延迟和协议僵化，无法让http有更大进展，所以http3出来了基于udp的quic协议，绕过tcp协议
拥有：多线路复用，快速握手（0或1rtt连接),tls1.3，传输可靠，流量控制等功能
｜
HTTP3(QUIC协议):流量控制(确认数据包重传,堵塞控制)，有序交付，快速握手(基于udp,从1个rrt内快速连接)，多路复用(一物理连接可多个独立逻辑数据流，实现了数据流单独传输)


JavaSript V8工作原理                             
     --*编译阶段*--                                                                            
  构建AST(语法生成树)-->>词法(堆栈生成,创建执行环境等等)>>--语法分析验证语法错误->-形成树和上下文-->>解释器转换字节码->>-再转机器码
	  ｜                                                                                  ｜
          ｜                                                                     即时编译(JIT)和编译器对hotcode储存,加快再执行速度
   ----*执行阶段*----                                
var和function从变量提升进词法环境 
          ｜
   let和const进语法环境                                                     1)某函数内部找不到引用变量名就outer从全局上下文的语法和词法环境中找2)闭包产生地址在堆中
          ｜                                                                                               ｜
 创建全局执行上下文,所有变量undefined-->>执行所有语句并赋值>>---->>为每个函数执行创建其上下文放在栈中>>--->>调用每个函数执行结束就从栈中pop出
         （栈）                                                                                          
           ｜
   ----*垃圾回收阶段*----   
  ------ 当前执行状态指针（ESP）-----移到下个执行上下载文,上个context会失效并被新context覆盖但堆内存还在 
				   ｜  
				   ｜ --------------垃圾回收机制-------------------
       代际假说--对象被分配后难访问并活很久，所以分对象为新生代(副垃圾回收器)和老生代(主垃圾回收器)--------分代收集
                                   ｜----------------------------<<----------------------------｜
                 新生代--->---占用空间大/存活时间长的对象存入--->---老生代
	          ｜                                            ｜
  当对象区域满后,收集已标记并存活对象              1.标记未遍历出数据引用的垃圾数据，然后清除算法
  进空闲区域然后重复翻转存活下去                  2.标记整理算法剩下内存碎片(存活对象)到一端
		 ｜                                             ｜
                  -------------js/标记/清除/整理/js---------------		
		                      |
				主线程里造成页面卡顿--------(解决方式)增量标记算法把垃圾回收任务分为多个小任务-

1.js先把var和function函数提升词法环境中,let和const放进语法环境,创建执行全局上下文放在函数调用栈中并都为undefined,然后执行语句中对应变量名赋值,每个被执行的函数都会放在栈中,每次
执行一个就从pop一个，如果某个函数内部没有找到对应变量名，那么栈中函数上下文的outer就会从全局上下文中的词法环境开始找到语法环境中去。
2.词性作用域链决定作用域链各自范围,闭包受其影响,即使闭包所在函数体执行结束后被pop,但是闭包存在词法环境内依然存在.

（前端性能优化）
性能优化性能体系建立：(性能应该是基于业务和实际用户体验需求的一种工程实施，不是纯粹的技术游戏)
a.现状评估和建立指标----(用户)什么样性能指标能更好地评估用户体验？(公司)什么样的指标会影响业务价值？---答案---页面加载性能(与用户流失率直接相关)；动画与操作性能；内存、电量消耗
    ｜--- 以页面加载性能为例子,计算秒开率(一秒之内打开的用户占用户总量的百分比,因为当加载时间低于1秒，用户体感差别不大了)来建立性能优化认知
    ｜
b.技术方案----因从url输入到浏览器生成所有内容与页面首次加载时间息息相关，所以网页加载时间,请求数量和体积都相关---从缓存,降低请求数,请求成本,传输体积提出技术方案
    ｜---缓存(客户端强缓存策略);请求成本(1.http控制隔段时间主动请求dns请求获取域名,不走系统dns，2.tcp/tls逻辑复用由服务器升级升级http2,尽量合并域名)
    |---请求数量(1.js,css打包到html，2.用js控制图片异步加载和懒加载，3.小型图片用data-url/i
    ｜---体积(1.尽量有svg/gradient替图片，2.据机型或网络状况控图片清晰度，3.避免用大背景图，4.锐化低清晰度的图片来提升体验）
    ｜
c.执行---从低到高-->--1.纯管理(用纯粹的管理手段来执行方案),2.制度化(用规则代替人的命令，指定责任人，通过培训、checklist、定期 review 等具体措施来保证实施)
   ｜----3.自动化(在一些重要的操作路径上设置规则,针对我们性能优化,有两个点适合做这件事：一个是把开发好的页面发布上线，另一个是开发好的页面 URL 投放到首页等处的链接)
   |
d.结果评估和监控----做线上监控-->>--数据采集；数据展现
   |----数据采集（Performance API记录的性能数据),数据展现（用不同的数据可视化方案来展现性能数据）

(保证团队效率和开发体验）
工具链---帮助技术团队提升效率和体验，从目标、方案设计、执行和结果讲解
  ｜---体系目标：解决单个工具具体问题之外,还需注意一致性和配合问题---版本一致，避免工具冲突
  |---方案设计：初始化项目,运行和调试,测试(单元测试),发布
  ｜---执行和性能监控一样，这里选择自动化
  ｜---结果（检验开发体验）：调试/构建次数；构建平均时长；使用的工具版本；发布次数

(保证团队代码质量）
持续集成---以定期或者实时的方式集成所有人工作成果，做统一的构建和测试及早处理集成阶段的问题(1.代码形成可测试的版本,2.通过测试来验证提交的代码有效性),使软件质量和开发进度可控
  |----基于自动化分析页面结构和数据采集并扫描代码----预览环境(前端指定次提交代码到仓库都同步到预览环境，保证预览环境可用)；规则校验(通过数据采集性能数据和代码扫描，保证提交的代码满足质量要求)
  |----1.预览环境（在内网申请机器和域名部署web服务器，然后建立发布机制保持与线上发布一致）
  |----2.规则校验(a.页面结构扫描(用无头浏览器配合JS代码编写的规则完成);b.运行时数据采集(在页面插入公共js文件来完成，基本用PerformanceAPI采集性能数据，window.onerror采集js错误);c.代码扫描(根据需要，选择社区方案或者自研))
  |----集成实施的话，用issue方式来管理规则的提案，在月周会讨论并保证团队一致
  
（紧急不重要业务需求）
搭建系统---解决大量的简单页面生产问题,业务的体量和服务的范围来决定具体的指标要求
  |---搭建设计思路:1.模板化搭建,模板和数据构成页面,2.模块化搭建，模块和数据组织成页面,3.数据驱动界面
  |---a.数据(用途区分：界面配置数据和内容数据,来源区分：填写的数据和来自 API 产生的数据)，难点：实际业务编辑器和跟服务端 API 的对接，b.模板难点：版本化和数据的格式定义
  |---c.模块除了模板的重点,移动端拖拽比较简单,难点：桌面拖拽系统，d.最终页面也需要版本化滚动回流，难点:跟生产环境的对接或发布系统结合
  |---搭建系统实施有了产品和用户就行，系统监控中用户访问和生产页面数是指标

前端核心问题：
1.组件化,
2.兼容性和适配性---设备像素比率DPR(viewport规则来控制缩放比例解决),单位英寸像素数PPI(主要影响的是文字，可采用media规则来适配),分辨率适配使用vw单位解决
3.单页应用----把多个页面的内容实现在同一个实际页面内的技术，也就是说，我们要在一个“物理页面”内，通过架构设计来实现若干个“逻辑页面”--主要是逻辑页面解耦、独立开发和发布和保持前进后退历史
4.扩展前端边界



Trees — like linked lists — are made up of nodes and links.

- Root: the topmost node of the tree, which never has any links or edges connecting to it
- Link/Edge: the reference that a parent node contains that tells it what its child node is
- Child: any node that has a parent node that links to it
- Parent: any node that has a reference or link to another node
- Sibling: any group of nodes that are the children of the same node
- Internal: any node that has a child node (basically all parent nodes)
- Leaf: any node that does not have a child node in the tree

If a tree has n nodes, it will always have one less number of edges (n-1).

For the most part, the two properties that we will be the most concerned with are either the depth of a node or the height of a node.

The child node of a tree structure could also very well be the parent node to many other child nodes — which would effectively make it the root node of a mini subtree of the larger tree structure.

DAGs: A cycle in a diagraph or directed graph G is a set of edges 
The applications of DAGs include the following:
(1) Inheritance between C++ classes or Java interfaces.
(2) Prerequisites between courses of a degree program.
(3) Scheduling constraints between the tasks of a projects.

** In-order Traversal (left-root-right)
// non-recursive javascript program for inorder traversal

/* Class containing left and right child of
current node and key value*/

function inorder(root){
	if (root == null)
		return;
		
	var s = [];	
	var curr = root;

		// traverse the tree
	while (curr != null || s.length > 0){

		/* Reach the left most Node of the curr Node */
	   while (curr != null) {
		/* place pointer to a tree node on the stack before traversing the node's left subtree */
		s.push(curr);
		curr = curr.left;
	 }

		/* Current must be NULL at this point */
		curr = s.pop();

		/* we have visited the node and its left subtree. Now, it's right subtree's turn */
		curr = curr.right;
		}
	}

** Pre-order Traversal(root-left-right)

// Iterative function to do Preorder
// traversal of the tree
function preorderiterative(node) {

	if (node == null){
		return;
	}

	let st = [];

	// Start from root node (set curr
	// node to root node)
	let curr = node;

	// Run till stack is not empty or
	// current is not NULL
while (curr != null || st.length > 0){
		
		// Print left children while exist
		// and keep pushing right into the
		// stack.
	while (curr != null){
			if (curr.right != null)
				st.push(curr.right);

			curr = curr.left;
		}

		// We reach when curr is NULL, so We
		// take out a right child from stack
		if (st.length > 0)
		{
			curr = st.pop();
		}
	}
}

** Post-order Traversal (left-right-root)
// JavaScript program for iterative post-order
// order using two stacks

function postOrderIterative(root) {
		// Two stacks as used in explanation
		// Create two stacks
		var s1 = [];
		var s2 = [];

		if (root == null) return;

		// Push root to first stack
		s1.push(root);

		// Run while first stack is not empty
		while (s1.length > 0) {
		
		// Pop an item from s1 and Push it to s2
		var temp = s1.pop();
		s2.push(temp);

		// Push left and right children of
		// removed item to s1
		
		if (temp.left != null) s1.push(temp.left);
		if (temp.right != null) s1.push(temp.right);
		}

		// Print all elements of second stack
		while (s2.length > 0) {
		var temp = s2.pop();
		document.write(temp.data + " ");
		}
}





// Javascript program to print DFS(Depth First Search or DFS for a Graph)
// traversal from a given graph

// This class represents a
// directed graph using adjacency
// list representation
class Graph
{
	
	// Constructor
	constructor(v)
	{
		this.V = v;
		this.adj = new Array(v);
		for(let i = 0; i < v; i++)
			this.adj[i] = [];
	}
	
	// Function to add an edge into the graph
	addEdge(v, w)
	{
		
		// Add w to v's list.
		this.adj[v].push(w);
	}
	
	// A function used by DFS
	DFSUtil(v, visited)
	{
		
		// Mark the current node as visited and print it
		visited[v] = true;
		document.write(v + " ");

		// Recur for all the vertices adjacent to this
		// vertex
		for(let i of this.adj[v].values())
		{
			let n = i
			if (!visited[n])
				this.DFSUtil(n, visited);
		}
	}
	
	// The function to do DFS traversal.
	// It uses recursive
	// DFSUtil()
	DFS(v)
	{
		
		// Mark all the vertices as
		// not visited(set as
		// false by default in java)
		let visited = new Array(this.V);
		for(let i = 0; i < this.V; i++)
			visited[i] = false;

		// Call the recursive helper
		// function to print DFS
		// traversal
		this.DFSUtil(v, visited);
	}
}

// Driver Code
g = new Graph(4);

g.addEdge(0, 1);
g.addEdge(0, 2);
g.addEdge(1, 2);
g.addEdge(2, 0);
g.addEdge(2, 3);
g.addEdge(3, 3);

document.write("Following is Depth First Traversal " +
			"(starting from vertex 2)<br>");

g.DFS(2);


// updated version

	// This class represents a
	// directed graph using adjacency
	// list representation
	class Graph
	{
	
		// Constructor
		constructor(v) {
		this.V = v;
		this.adj = new Array(v).fill([]);
		}

		// Function to Add an edge into the graph
		AddEdge(v, w) {
		this.adj[v].push(w); // Add w to v's list.
		}

		// A function used by DFS
		DFSUtil(v, visited)
		{
		
		// Mark the current
		// node as visited and print it
		visited[v] = true;
		document.write(v + " ");

		// Recur for all the
		// vertices adjacent to this
		// vertex
		for (const n of this.adj[v]) {
			if (!visited[n]) this.DFSUtil(n, visited);
		}
		}

		// The function to do
		// DFS traversal. It uses recursive
		// DFSUtil()
		DFS()
		{
		
		// Mark all the vertices as not visited(set as
		var visited = new Array(this.V).fill(false);

		// Call the recursive helper
		// function to print DFS
		// traversal starting from
		// all vertices one by one
		for (var i = 0; i < this.V; ++i)
			if (visited[i] == false) this.DFSUtil(i, visited);
		}
	}
	
	// Driver Code
	var g = new Graph(4);

	g.AddEdge(0, 1);
	g.AddEdge(0, 2);
	g.AddEdge(1, 2);
	g.AddEdge(2, 0);
	g.AddEdge(2, 3);
	g.AddEdge(3, 3);

	document.write("Following is Depth First Traversal<br>");

	g.DFS();
	


