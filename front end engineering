React principle

    JSX-声明式---既直接写html标记,又动态创建组件----
    ｜
    ｜----------------------组件层级形成元素树---<<函数组件<<---hook用于内部状态或执行副作用操作,以函数形式存在API(外部数据绑定函数执行,更新目标代码结果)----<----<----<---
                                  ｜                  
                                 ^｜                              1.能计算得到不要储存,尽量无状态由props获取数据
视图及相关逻辑,数据,交互等封装-->>-组件(react前端应用核心) -----原则>>----2.一组件对应一件事
    ｜                            ｜   ｜                
   View --<<<-- props(单向数据绑定) + state(状态更新,不提供方法)
    ｜                                                               
Virtual Dom ->-differ算法----->-----计算与原Dom差异----->-----更新数据并全局渲染--->
                                         ｜
                              每层节点有唯一标识key,新旧对比中,
                              旧节点消失或被替换就删除并更新






前端工程化（代码部署，规范，性能提升）
｜                              
｜————————————————————————｜——————————————————————————｜——————————————————————————｜—————————————————————————｜————————————————————————｜——————
wepack项目构建          Babel转译js                 模块化开发------复用分治-------组件化开发                  css预编译
弥补浏览器不足                                          |                           ｜
                                                      |                            ｜
                                                      |                             ｜
                                                      |                              ｜
                                   ---|---------------|-------------|---              1.页面上每个独立,可视/交互
                                    Common.JS        AMD           CMD                区域视为一组件
                                       |              |依赖前置      |依赖就近书写        2.不同页面根据需要放相关组件       
                           定义新js模块并exports    异步模块定义                           即可组成完整的页面
                           require加载后test调用   define定义模块
                                                 require加载模块





前端模块化（https://blog.csdn.net/fu983531588/article/details/89309242）
