Two Loop instance:
bubbleSort（依次遍历出最大至最小值） - insertionSort（每个值都与unsorted list比较大小，直到达到升序排列） - selection sort（找出最小的值往前移动）

MULTIBLE Functions instance:
quickSort（根据pviot用分割函数分成两个比他大小的部分，大小部分再分割函数，每部分再对值和交换 - mergeSort(divider and conquer，把数分出两部分排序，两部分再分成为两个部分，合计四个部分再分成为八个部分排序)

Searching:
binary searching(left,mid,right是基础,左右部分搜索也可以)

Binary searching:
var search = function(nums, target) {
    if (nums.length === 0) return -1; 

  let left = 0;
  let right = nums.length - 1;

  while (left <= right) {
    const mid = left + Math.floor((right - left) / 2);

    if (nums[mid] === target) return mid;

    // left sorted
    if (nums[left] <= nums[mid]) {
      
      // check if is in the left sorted part
      if (nums[left] <= target && target < nums[mid]) {
        right = mid - 1;
      } else {
        left = mid + 1;
      }
   
    // right sorted
    } else {
      // check if is in the right sorted part
      if (nums[mid] < target && target <= nums[right]) {
        left = mid + 1;
      } else {
        right = mid - 1;
      }
    }
  }
  return -1;
};

quick sort:
quickSort(array,leftIndex,rightIndex){
  var pviot;
  if(array.length>1){
      pviot = partition(array,leftIndex,rightIndex);
  }
  if(leftIndex < pviot-1){
       quickSort(array,leftIndex,pviot-1);
  }
  if(rightIndex > pviot){
       quickSort(array,pviot,rightIndex);
  }
}

function partition(array,left,right){
    var pviot = array[Math.floor(left+right)/2];
    
    while(left < right){

     while(array[left]< pviot){
       left++;
     }
    
     while(array[right]>pviot){
       right--;
     }
     
     // swap. values
     if(left<=right){
       let current = array[left];
       array[left] = array[right];
       array[right] = current;
       left++;
       right--;
     }
    
   }
   return left;
}

mergeSort:
function mergeSort(array){

    if(array.length<1) return;
    
    var midpoint = Math.floor(array.length/2);
    var leftarray = array.slice(left,midpoint-1);
    var rightarray = array.slice(midpoint,right);
    
    mergeSort(leftarray);
    mergeSort(rightarray);
    
    merge(array,left);
    
    return array;
}

function merge(leftarray,rightarray,array){
    var index = 0;
    while(leftarray&&rightarray){
      if(leftarray <= rightarray){
        array[index++] = leftarray.unshift();    
      }
      if(leftarray >= rightarray){
         array[index++] = rightarray.unshift();
      }
    }
    
    while(leftarray){
      array[index++] = leftarray.unshift();
    }
    while(rightarray){
      array[index++] = rightarray.unshift();
    }
}

insertion sort

insetionSort(array){
        for(let i=1；i<array.length; i++){
        let current = array[i];
        for(let j=i; j>0 && current < array[j-1]; j--){
             array[j] = array[j-1];
          }
          array[j]=current;
        }
    return array
}

bubbleSort   // 
bubbleSort(array){
       var sorted = false;
     while(!sorted){
         sorted = true;
        for(let i = 0; i< array.length; i++){
           if(array[i] = array[i+1]{
             sorted = false;
             var current = array[i+1];
                 array[i+1] = array[i];
                 array[i] = current;
           }
         }
       }
      return array;
}


selection sort
selectionSort(array){
   for(let index=0;i<array.length-1;i++){
     var smallest = index;
     for(let j=i+1;j<array.length-1;j++){
         if(array[smallest] < array[index];
         smallest = index;
     } 
  }
   
   if(smallest != index){
   let current = array[index];
   array[index] = array[smallest];
   array[smallest] = array[index];
   }
   return array;
}
