React principle

                              函数组件：某个状态发生变化时，我需要做什么
                              class组件:某个生命周期中我需要用什么（挂载更新卸载阶段错误处理，渲染和提交阶段）
                                         ｜                                                                           1.函数作为子组件
                                         ｜-------------->组件设计模式>--------组件复用(父传子兄弟,但父或兄弟不需时)----------2.高阶组件(函数作为参数给子及其以下元素)
JSX-声明式-直接写html标记又动态创建组件       ｜        解决class函数内状态无法外部调用导致生命周期有限且react未用到其继承-->>优点>>---1.逻辑复用2.同一业务逻辑放一起,关注分离
    ｜                                    ------｜                        |（为什么出现）
    ｜                                          ｜                        ｜
    ｜----------------------组件层级形成元素树---<<函数组件<<---hook用于目标勾数据源当其变化时,更新目标代码结果---->>使用规则>>----1.顶级作用域,自定义hooks和函数组件中有用
                                  ｜                                                                                  2.不得在循环条件嵌套函数内使用
                                 ^｜                              1.能计算得到不要储存,尽量无状态由props获取数据            3.ESlint检查hooks使用
视图及相关逻辑,数据,交互等封装-->>--组件(react前端应用核心) -----原则>>----2.一组件对应一件事     
    ｜                          ｜    ｜-------------------------------------->>>-------------提供全局通信context                
   View --<<<-- props(单向数据绑定) + state(状态更新,不提供方法)----------------------------------全局唯一store和树状结构维护业务数据程序状态让页面里多组件state共享
    ｜                                                                                                           ｜
Virtual Dom ->-differ算法----->-----计算与原Dom差异----->-----更新数据并全局渲染---｜                               Redux机制
    ｜                                    ｜                                                                      ｜
    ｜                        每层节点有唯一标识key,新旧对比中,                                先建store,用action和reducer修改store又subscribe监听store变化
    ｜                          旧节点消失或被替换就删除并更新                                                         ｜
    ｜                                     ｜                                                          （react-redux｜机制）
    ｜                                     ｜                                                  View----<subscribe<----store(JavaScript对象)
  Router                                造成卡顿                                                   |                       |^
(不刷新页面而显示不同页面)                    ｜                                                   Action---->disptach>----Reducer
    |                               fiber结构(线程）                                   (object函数,描述发生动作) ｜
 hash/history模式                          ｜                                                                 |异步action复用逻辑的使用模式
                                          ｜                                                                 ｜中间件可传递action给reducer也可构建新action
                               让出CPU执行权,分批此延时执行                      Action-->--middleware(如果action是函数,就直接执行并dispatch传递给函数)-->--reducer



生命周期          

                          创建                         更新                     卸载
                      constructor             props,state,foreUpdate           |
                           |                           |                       | 
     渲染阶段                   - getDerivedStateFromProps -                    |
                           |          shouldComponentUpdate                    |
                           |.                          |                       |
                               -      Render       -                           ｜
   ----------              |                           |                       |
                                            getSnapShotBeforeUpdate            ｜
                           |                           |                       |
     提交阶段                               react更新DOM和Refs                   ｜
                           |                           |                       |
                    componentDidMount          componentDidUpdate     componentWillunmount


前端工程化（代码部署，规范，性能提升）
｜                              
｜————————————————————————｜——————————————————————————｜——————————————————————————｜—————————————————————————｜—————————————————————｜——————
wepack项目构建          Babel转译js                 模块化开发------复用分治-------组件化开发                  css预编译
弥补浏览器不足                                          |                           ｜
                                                      |                            ｜
                                                      |                             ｜
                                                      |                              ｜
                                   ---|---------------|-------------|---              1.页面上每个独立,可视/交互
                                    Common.JS        AMD           CMD                区域视为一组件
                                       |              |依赖前置      |依赖就近书写        2.不同页面根据需要放相关组件       
                           定义新js模块并exports    异步模块定义                           即可组成完整的页面
                           require加载后test调用   define定义模块
                                                 require加载模块

前端模块化（https://blog.csdn.net/fu983531588/article/details/89309242）
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
Vue与react区别：
1.一组件对应一watcher监听并推送数据变化给虚拟dom中diff算法更新，
2.react虚拟dom元素树计算然后对比更新节点，会造成卡顿而引fiber架构把虚拟dom微观化形成链表，计算子-兄弟-父元素，不产生停止页面卡顿

Vue principle --- 思考数据怎么变化

MVVM模式：1.Model数据模型和业务逻辑都在层中定义;2.View代表UI视图，负责数据的展示;3.ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；
                                          （view model）
View ------------------<------------------DOM listeners-----------------<--------------Model
(DOM)------------------->-----------------DOM bindinging----------------->------------(plain javascript object)
                                       VUE(单向数据流/双向绑定且是语法糖)
                                             |            
                                数据流 = 父组件属性props + 组件状态data + 状态管理器

- 基本原理-                                     

state+template
(对比机制和react一样)
     |
Virtual DOM----<component-render-function<-----trigger
\\\\\响应式更新\\\\\\\\\\                            ^｜ 
                            seter->-数据更新时提醒->--｜
render实例化-->--Data依赖转化成geter--->依赖性变化时>---watcher--------------<<dep<<-----通知变化-----observer(监听属性)
              (object.defineproperty())              ｜------添加订阅者-----^|
                        ^｜                          ｜^-----------绑定数据变动,更新函数--------------
                   响应式更新model                    更新                                         ^｜
                    与双向绑定无关                     ｜                                           ｜
                                                   View------<-初始化-<--<编译解析变量为数据<-----compile  >>>>>>>>>>>>
                                                                -
